//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/PlayerInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Cutscene"",
            ""id"": ""7d612d82-62c2-423b-bfca-18511c02dbaf"",
            ""actions"": [
                {
                    ""name"": ""SkipCutscene"",
                    ""type"": ""Button"",
                    ""id"": ""9dd3659d-4e5c-43ce-8f41-23c4aa964375"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e8969119-eec6-4f76-acd9-05997df10eec"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9d5d6fb-05d3-4e4e-a207-9e025b79593a"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Timeline"",
            ""id"": ""66a09b81-7ebf-40d2-9ff9-acb1db615a4d"",
            ""actions"": [
                {
                    ""name"": ""SkipForward"",
                    ""type"": ""Button"",
                    ""id"": ""443d658d-3eaa-4851-b633-e5559934e8b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SkipBackward"",
                    ""type"": ""Button"",
                    ""id"": ""83644339-c0b2-4932-98a3-4830753f5900"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayPause"",
                    ""type"": ""Button"",
                    ""id"": ""53456490-1710-4f31-bb98-4d4dfd72376c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AccelerateTime"",
                    ""type"": ""Button"",
                    ""id"": ""edf3b842-2276-4420-bd0a-366cefc47a29"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecelerateTime"",
                    ""type"": ""Button"",
                    ""id"": ""c7272b39-4ca5-4e67-99a3-40dae8a0f7d8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4d2db550-932a-40e0-844b-7d0ad68d9fab"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1542e775-be16-4fed-a3c9-e2d5564d6e3e"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6838ed7-f63e-473e-926f-785a2d7f5095"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e175204-a05c-4640-b029-8e42ccada42a"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SkipBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""842a1145-cf8a-4fc3-86a0-e7b025172cf0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0727ecb5-a2c6-416c-a68b-5e4180daa70d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayPause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14f9346b-e282-4bdf-96d8-916cfe9f6f1c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AccelerateTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64bb232f-41c3-4ec3-84c9-3ce98feca69e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AccelerateTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8af36713-f549-4553-9691-c28f587126b8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecelerateTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3082415-c7d8-44e7-a359-3de2d09dfce5"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecelerateTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Custom UI"",
            ""id"": ""334f8711-92ea-4f2b-9644-3966a534db69"",
            ""actions"": [
                {
                    ""name"": ""Hide UI"",
                    ""type"": ""Button"",
                    ""id"": ""3bbd9955-7ccb-4d3c-8b3b-5f7ea848b6bd"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31122a6b-43e3-478c-bad2-5e49f60e51dc"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hide UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""00dcbd1a-3b54-4072-afbc-e150564690b2"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hide UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""cc75b880-a311-4d5b-9e22-e7539108eccf"",
            ""actions"": [
                {
                    ""name"": ""Orbit"",
                    ""type"": ""PassThrough"",
                    ""id"": ""523d59b7-d6d1-44a3-a4b7-5d11af7212a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""540db8f9-7151-4a8f-a2a4-23f0e838dcd6"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Invert"",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71072933-2b45-4cb1-99f6-f814c4ae43f2"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""ccc2a7e8-cad3-4896-80f9-306a3cd80dd0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b23eccf2-19d5-4677-aabf-08e4e76a5ea5"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e5259133-821c-4a0e-9003-5419ded174b6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""b880c102-331a-41b3-8aa7-a1a764d95be9"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Orbit"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""1d3522d7-5e36-469a-915f-0778438db933"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""421498fe-4a6e-47d2-8ae3-465620ac2910"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""DeltaTimeScale,ScaleVector2(x=0.06,y=0.06)"",
                    ""groups"": """",
                    ""action"": ""Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a2e2b5e0-af4c-4fb6-ad82-1292c536fad0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=35,y=35)"",
                    ""groups"": """",
                    ""action"": ""Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SidePanel"",
            ""id"": ""52ba4c4f-b804-467a-ac41-ea6fe4a03a27"",
            ""actions"": [
                {
                    ""name"": ""ToggleSkipCutscene"",
                    ""type"": ""Button"",
                    ""id"": ""5bbc5f0a-507f-4364-945c-38773fd6c785"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchDataPanel"",
                    ""type"": ""Button"",
                    ""id"": ""c2713a52-ce58-4958-8386-3a8fb8e0a755"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchActionsPanel"",
                    ""type"": ""Button"",
                    ""id"": ""8df208e1-d2ad-45f2-a962-d8a964f5b9aa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""990d59bc-bc5e-4c8b-b230-92ebaccb916f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSkipCutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b6b85dc-390d-48da-8a94-645d5c1bc0ad"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchDataPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""58e2d8aa-5c28-412f-b143-73f2d6b80070"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchActionsPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KBM"",
            ""bindingGroup"": ""KBM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Cutscene
        m_Cutscene = asset.FindActionMap("Cutscene", throwIfNotFound: true);
        m_Cutscene_SkipCutscene = m_Cutscene.FindAction("SkipCutscene", throwIfNotFound: true);
        // Timeline
        m_Timeline = asset.FindActionMap("Timeline", throwIfNotFound: true);
        m_Timeline_SkipForward = m_Timeline.FindAction("SkipForward", throwIfNotFound: true);
        m_Timeline_SkipBackward = m_Timeline.FindAction("SkipBackward", throwIfNotFound: true);
        m_Timeline_PlayPause = m_Timeline.FindAction("PlayPause", throwIfNotFound: true);
        m_Timeline_AccelerateTime = m_Timeline.FindAction("AccelerateTime", throwIfNotFound: true);
        m_Timeline_DecelerateTime = m_Timeline.FindAction("DecelerateTime", throwIfNotFound: true);
        // Custom UI
        m_CustomUI = asset.FindActionMap("Custom UI", throwIfNotFound: true);
        m_CustomUI_HideUI = m_CustomUI.FindAction("Hide UI", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Orbit = m_Camera.FindAction("Orbit", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        // SidePanel
        m_SidePanel = asset.FindActionMap("SidePanel", throwIfNotFound: true);
        m_SidePanel_ToggleSkipCutscene = m_SidePanel.FindAction("ToggleSkipCutscene", throwIfNotFound: true);
        m_SidePanel_SwitchDataPanel = m_SidePanel.FindAction("SwitchDataPanel", throwIfNotFound: true);
        m_SidePanel_SwitchActionsPanel = m_SidePanel.FindAction("SwitchActionsPanel", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_Cutscene.enabled, "This will cause a leak and performance issues, PlayerInputActions.Cutscene.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Timeline.enabled, "This will cause a leak and performance issues, PlayerInputActions.Timeline.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CustomUI.enabled, "This will cause a leak and performance issues, PlayerInputActions.CustomUI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, PlayerInputActions.Camera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SidePanel.enabled, "This will cause a leak and performance issues, PlayerInputActions.SidePanel.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Cutscene
    private readonly InputActionMap m_Cutscene;
    private List<ICutsceneActions> m_CutsceneActionsCallbackInterfaces = new List<ICutsceneActions>();
    private readonly InputAction m_Cutscene_SkipCutscene;
    /// <summary>
    /// Provides access to input actions defined in input action map "Cutscene".
    /// </summary>
    public struct CutsceneActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CutsceneActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Cutscene/SkipCutscene".
        /// </summary>
        public InputAction @SkipCutscene => m_Wrapper.m_Cutscene_SkipCutscene;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Cutscene; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CutsceneActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CutsceneActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CutsceneActions" />
        public void AddCallbacks(ICutsceneActions instance)
        {
            if (instance == null || m_Wrapper.m_CutsceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Add(instance);
            @SkipCutscene.started += instance.OnSkipCutscene;
            @SkipCutscene.performed += instance.OnSkipCutscene;
            @SkipCutscene.canceled += instance.OnSkipCutscene;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CutsceneActions" />
        private void UnregisterCallbacks(ICutsceneActions instance)
        {
            @SkipCutscene.started -= instance.OnSkipCutscene;
            @SkipCutscene.performed -= instance.OnSkipCutscene;
            @SkipCutscene.canceled -= instance.OnSkipCutscene;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CutsceneActions.UnregisterCallbacks(ICutsceneActions)" />.
        /// </summary>
        /// <seealso cref="CutsceneActions.UnregisterCallbacks(ICutsceneActions)" />
        public void RemoveCallbacks(ICutsceneActions instance)
        {
            if (m_Wrapper.m_CutsceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CutsceneActions.AddCallbacks(ICutsceneActions)" />
        /// <seealso cref="CutsceneActions.RemoveCallbacks(ICutsceneActions)" />
        /// <seealso cref="CutsceneActions.UnregisterCallbacks(ICutsceneActions)" />
        public void SetCallbacks(ICutsceneActions instance)
        {
            foreach (var item in m_Wrapper.m_CutsceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CutsceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CutsceneActions" /> instance referencing this action map.
    /// </summary>
    public CutsceneActions @Cutscene => new CutsceneActions(this);

    // Timeline
    private readonly InputActionMap m_Timeline;
    private List<ITimelineActions> m_TimelineActionsCallbackInterfaces = new List<ITimelineActions>();
    private readonly InputAction m_Timeline_SkipForward;
    private readonly InputAction m_Timeline_SkipBackward;
    private readonly InputAction m_Timeline_PlayPause;
    private readonly InputAction m_Timeline_AccelerateTime;
    private readonly InputAction m_Timeline_DecelerateTime;
    /// <summary>
    /// Provides access to input actions defined in input action map "Timeline".
    /// </summary>
    public struct TimelineActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TimelineActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Timeline/SkipForward".
        /// </summary>
        public InputAction @SkipForward => m_Wrapper.m_Timeline_SkipForward;
        /// <summary>
        /// Provides access to the underlying input action "Timeline/SkipBackward".
        /// </summary>
        public InputAction @SkipBackward => m_Wrapper.m_Timeline_SkipBackward;
        /// <summary>
        /// Provides access to the underlying input action "Timeline/PlayPause".
        /// </summary>
        public InputAction @PlayPause => m_Wrapper.m_Timeline_PlayPause;
        /// <summary>
        /// Provides access to the underlying input action "Timeline/AccelerateTime".
        /// </summary>
        public InputAction @AccelerateTime => m_Wrapper.m_Timeline_AccelerateTime;
        /// <summary>
        /// Provides access to the underlying input action "Timeline/DecelerateTime".
        /// </summary>
        public InputAction @DecelerateTime => m_Wrapper.m_Timeline_DecelerateTime;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Timeline; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TimelineActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TimelineActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TimelineActions" />
        public void AddCallbacks(ITimelineActions instance)
        {
            if (instance == null || m_Wrapper.m_TimelineActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TimelineActionsCallbackInterfaces.Add(instance);
            @SkipForward.started += instance.OnSkipForward;
            @SkipForward.performed += instance.OnSkipForward;
            @SkipForward.canceled += instance.OnSkipForward;
            @SkipBackward.started += instance.OnSkipBackward;
            @SkipBackward.performed += instance.OnSkipBackward;
            @SkipBackward.canceled += instance.OnSkipBackward;
            @PlayPause.started += instance.OnPlayPause;
            @PlayPause.performed += instance.OnPlayPause;
            @PlayPause.canceled += instance.OnPlayPause;
            @AccelerateTime.started += instance.OnAccelerateTime;
            @AccelerateTime.performed += instance.OnAccelerateTime;
            @AccelerateTime.canceled += instance.OnAccelerateTime;
            @DecelerateTime.started += instance.OnDecelerateTime;
            @DecelerateTime.performed += instance.OnDecelerateTime;
            @DecelerateTime.canceled += instance.OnDecelerateTime;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TimelineActions" />
        private void UnregisterCallbacks(ITimelineActions instance)
        {
            @SkipForward.started -= instance.OnSkipForward;
            @SkipForward.performed -= instance.OnSkipForward;
            @SkipForward.canceled -= instance.OnSkipForward;
            @SkipBackward.started -= instance.OnSkipBackward;
            @SkipBackward.performed -= instance.OnSkipBackward;
            @SkipBackward.canceled -= instance.OnSkipBackward;
            @PlayPause.started -= instance.OnPlayPause;
            @PlayPause.performed -= instance.OnPlayPause;
            @PlayPause.canceled -= instance.OnPlayPause;
            @AccelerateTime.started -= instance.OnAccelerateTime;
            @AccelerateTime.performed -= instance.OnAccelerateTime;
            @AccelerateTime.canceled -= instance.OnAccelerateTime;
            @DecelerateTime.started -= instance.OnDecelerateTime;
            @DecelerateTime.performed -= instance.OnDecelerateTime;
            @DecelerateTime.canceled -= instance.OnDecelerateTime;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TimelineActions.UnregisterCallbacks(ITimelineActions)" />.
        /// </summary>
        /// <seealso cref="TimelineActions.UnregisterCallbacks(ITimelineActions)" />
        public void RemoveCallbacks(ITimelineActions instance)
        {
            if (m_Wrapper.m_TimelineActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TimelineActions.AddCallbacks(ITimelineActions)" />
        /// <seealso cref="TimelineActions.RemoveCallbacks(ITimelineActions)" />
        /// <seealso cref="TimelineActions.UnregisterCallbacks(ITimelineActions)" />
        public void SetCallbacks(ITimelineActions instance)
        {
            foreach (var item in m_Wrapper.m_TimelineActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TimelineActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TimelineActions" /> instance referencing this action map.
    /// </summary>
    public TimelineActions @Timeline => new TimelineActions(this);

    // Custom UI
    private readonly InputActionMap m_CustomUI;
    private List<ICustomUIActions> m_CustomUIActionsCallbackInterfaces = new List<ICustomUIActions>();
    private readonly InputAction m_CustomUI_HideUI;
    /// <summary>
    /// Provides access to input actions defined in input action map "Custom UI".
    /// </summary>
    public struct CustomUIActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CustomUIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "CustomUI/HideUI".
        /// </summary>
        public InputAction @HideUI => m_Wrapper.m_CustomUI_HideUI;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_CustomUI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CustomUIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CustomUIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CustomUIActions" />
        public void AddCallbacks(ICustomUIActions instance)
        {
            if (instance == null || m_Wrapper.m_CustomUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CustomUIActionsCallbackInterfaces.Add(instance);
            @HideUI.started += instance.OnHideUI;
            @HideUI.performed += instance.OnHideUI;
            @HideUI.canceled += instance.OnHideUI;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CustomUIActions" />
        private void UnregisterCallbacks(ICustomUIActions instance)
        {
            @HideUI.started -= instance.OnHideUI;
            @HideUI.performed -= instance.OnHideUI;
            @HideUI.canceled -= instance.OnHideUI;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CustomUIActions.UnregisterCallbacks(ICustomUIActions)" />.
        /// </summary>
        /// <seealso cref="CustomUIActions.UnregisterCallbacks(ICustomUIActions)" />
        public void RemoveCallbacks(ICustomUIActions instance)
        {
            if (m_Wrapper.m_CustomUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CustomUIActions.AddCallbacks(ICustomUIActions)" />
        /// <seealso cref="CustomUIActions.RemoveCallbacks(ICustomUIActions)" />
        /// <seealso cref="CustomUIActions.UnregisterCallbacks(ICustomUIActions)" />
        public void SetCallbacks(ICustomUIActions instance)
        {
            foreach (var item in m_Wrapper.m_CustomUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CustomUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CustomUIActions" /> instance referencing this action map.
    /// </summary>
    public CustomUIActions @CustomUI => new CustomUIActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Orbit;
    private readonly InputAction m_Camera_Zoom;
    /// <summary>
    /// Provides access to input actions defined in input action map "Camera".
    /// </summary>
    public struct CameraActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public CameraActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Camera/Orbit".
        /// </summary>
        public InputAction @Orbit => m_Wrapper.m_Camera_Orbit;
        /// <summary>
        /// Provides access to the underlying input action "Camera/Zoom".
        /// </summary>
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="CameraActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="CameraActions" />
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Orbit.started += instance.OnOrbit;
            @Orbit.performed += instance.OnOrbit;
            @Orbit.canceled += instance.OnOrbit;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="CameraActions" />
        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Orbit.started -= instance.OnOrbit;
            @Orbit.performed -= instance.OnOrbit;
            @Orbit.canceled -= instance.OnOrbit;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="CameraActions.UnregisterCallbacks(ICameraActions)" />.
        /// </summary>
        /// <seealso cref="CameraActions.UnregisterCallbacks(ICameraActions)" />
        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="CameraActions.AddCallbacks(ICameraActions)" />
        /// <seealso cref="CameraActions.RemoveCallbacks(ICameraActions)" />
        /// <seealso cref="CameraActions.UnregisterCallbacks(ICameraActions)" />
        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="CameraActions" /> instance referencing this action map.
    /// </summary>
    public CameraActions @Camera => new CameraActions(this);

    // SidePanel
    private readonly InputActionMap m_SidePanel;
    private List<ISidePanelActions> m_SidePanelActionsCallbackInterfaces = new List<ISidePanelActions>();
    private readonly InputAction m_SidePanel_ToggleSkipCutscene;
    private readonly InputAction m_SidePanel_SwitchDataPanel;
    private readonly InputAction m_SidePanel_SwitchActionsPanel;
    /// <summary>
    /// Provides access to input actions defined in input action map "SidePanel".
    /// </summary>
    public struct SidePanelActions
    {
        private @PlayerInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SidePanelActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SidePanel/ToggleSkipCutscene".
        /// </summary>
        public InputAction @ToggleSkipCutscene => m_Wrapper.m_SidePanel_ToggleSkipCutscene;
        /// <summary>
        /// Provides access to the underlying input action "SidePanel/SwitchDataPanel".
        /// </summary>
        public InputAction @SwitchDataPanel => m_Wrapper.m_SidePanel_SwitchDataPanel;
        /// <summary>
        /// Provides access to the underlying input action "SidePanel/SwitchActionsPanel".
        /// </summary>
        public InputAction @SwitchActionsPanel => m_Wrapper.m_SidePanel_SwitchActionsPanel;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SidePanel; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SidePanelActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SidePanelActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SidePanelActions" />
        public void AddCallbacks(ISidePanelActions instance)
        {
            if (instance == null || m_Wrapper.m_SidePanelActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SidePanelActionsCallbackInterfaces.Add(instance);
            @ToggleSkipCutscene.started += instance.OnToggleSkipCutscene;
            @ToggleSkipCutscene.performed += instance.OnToggleSkipCutscene;
            @ToggleSkipCutscene.canceled += instance.OnToggleSkipCutscene;
            @SwitchDataPanel.started += instance.OnSwitchDataPanel;
            @SwitchDataPanel.performed += instance.OnSwitchDataPanel;
            @SwitchDataPanel.canceled += instance.OnSwitchDataPanel;
            @SwitchActionsPanel.started += instance.OnSwitchActionsPanel;
            @SwitchActionsPanel.performed += instance.OnSwitchActionsPanel;
            @SwitchActionsPanel.canceled += instance.OnSwitchActionsPanel;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SidePanelActions" />
        private void UnregisterCallbacks(ISidePanelActions instance)
        {
            @ToggleSkipCutscene.started -= instance.OnToggleSkipCutscene;
            @ToggleSkipCutscene.performed -= instance.OnToggleSkipCutscene;
            @ToggleSkipCutscene.canceled -= instance.OnToggleSkipCutscene;
            @SwitchDataPanel.started -= instance.OnSwitchDataPanel;
            @SwitchDataPanel.performed -= instance.OnSwitchDataPanel;
            @SwitchDataPanel.canceled -= instance.OnSwitchDataPanel;
            @SwitchActionsPanel.started -= instance.OnSwitchActionsPanel;
            @SwitchActionsPanel.performed -= instance.OnSwitchActionsPanel;
            @SwitchActionsPanel.canceled -= instance.OnSwitchActionsPanel;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SidePanelActions.UnregisterCallbacks(ISidePanelActions)" />.
        /// </summary>
        /// <seealso cref="SidePanelActions.UnregisterCallbacks(ISidePanelActions)" />
        public void RemoveCallbacks(ISidePanelActions instance)
        {
            if (m_Wrapper.m_SidePanelActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SidePanelActions.AddCallbacks(ISidePanelActions)" />
        /// <seealso cref="SidePanelActions.RemoveCallbacks(ISidePanelActions)" />
        /// <seealso cref="SidePanelActions.UnregisterCallbacks(ISidePanelActions)" />
        public void SetCallbacks(ISidePanelActions instance)
        {
            foreach (var item in m_Wrapper.m_SidePanelActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SidePanelActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SidePanelActions" /> instance referencing this action map.
    /// </summary>
    public SidePanelActions @SidePanel => new SidePanelActions(this);
    private int m_KBMSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme KBMScheme
    {
        get
        {
            if (m_KBMSchemeIndex == -1) m_KBMSchemeIndex = asset.FindControlSchemeIndex("KBM");
            return asset.controlSchemes[m_KBMSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Cutscene" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CutsceneActions.AddCallbacks(ICutsceneActions)" />
    /// <seealso cref="CutsceneActions.RemoveCallbacks(ICutsceneActions)" />
    public interface ICutsceneActions
    {
        /// <summary>
        /// Method invoked when associated input action "SkipCutscene" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkipCutscene(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Timeline" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TimelineActions.AddCallbacks(ITimelineActions)" />
    /// <seealso cref="TimelineActions.RemoveCallbacks(ITimelineActions)" />
    public interface ITimelineActions
    {
        /// <summary>
        /// Method invoked when associated input action "SkipForward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkipForward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SkipBackward" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSkipBackward(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "PlayPause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "AccelerateTime" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnAccelerateTime(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "DecelerateTime" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnDecelerateTime(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Custom UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CustomUIActions.AddCallbacks(ICustomUIActions)" />
    /// <seealso cref="CustomUIActions.RemoveCallbacks(ICustomUIActions)" />
    public interface ICustomUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "Hide UI" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHideUI(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Camera" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="CameraActions.AddCallbacks(ICameraActions)" />
    /// <seealso cref="CameraActions.RemoveCallbacks(ICameraActions)" />
    public interface ICameraActions
    {
        /// <summary>
        /// Method invoked when associated input action "Orbit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnOrbit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Zoom" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnZoom(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SidePanel" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SidePanelActions.AddCallbacks(ISidePanelActions)" />
    /// <seealso cref="SidePanelActions.RemoveCallbacks(ISidePanelActions)" />
    public interface ISidePanelActions
    {
        /// <summary>
        /// Method invoked when associated input action "ToggleSkipCutscene" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnToggleSkipCutscene(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchDataPanel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchDataPanel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SwitchActionsPanel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSwitchActionsPanel(InputAction.CallbackContext context);
    }
}
